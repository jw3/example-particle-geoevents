apiVersion: v1
kind: Template
metadata:
  name: geoevents
message: |-
  The following service(s) have been created in your project: ${NAME}.

    Geoevent Server: ${NAME}
     Postgis Server: ${NAME}-db

parameters:
- name: NAME
  displayName: Project Name
  description: The name given to components of this deployment.
  value: geoevents
  required: true

- name: PG_DATABASE
  displayName: Postgres Database
  value: postgres
  required: true

- name: PG_ROOT_PASSWORD
  displayName: Postgres Root Password
  value: postgres
  required: true

- name: PG_PRIMARY_USER
  displayName: Postgres User
  value: postgres
  required: true

- name: PG_PRIMARY_PASSWORD
  displayName: Postgres Password
  value: postgres
  required: true

- name: SOURCE_REPOSITORY_REF
  displayName: Git ref
  description: Branch or tag name.
  value: master
  required: true

objects:

#
# geoevent server
#

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${NAME}
    annotations:
      iconClass: "icon-scala"
  spec:
    resources:
      limits:
        cpu: "1"
        memory: "1Gi"
    source:
      type: Git
      git:
        uri: https://github.com/jw3/example-particle-geoevents.git
        ref: ${SOURCE_REPOSITORY_REF}
      contextDir: ""
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: DockerImage
          name: jwiii/sbt-s2i:1.1.4-2.12.5
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    triggers:
      - type: ConfigChange

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${NAME}

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${NAME}
          deploymentconfig: ${NAME}
      spec:
        containers:
        - env:
          - name: PERSIST_HOST
            value: ${NAME}-db
          resources:
            requests:
              cpu: 250m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 384Mi
          image: ""
          imagePullPolicy: Always
          name: ${NAME}
          ports:
          - containerPort: 9000
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}-sbt-s2i
    annotations:
      iconClass: icon-scala
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: jwiii/sbt-s2i:1.1.4-2.12.5
      generation: 1
      importPolicy: {}
      name: 1.1.4-2.12.5
      referencePolicy:
        type: Source

#
# postgis server
#

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}-db
    name: ${NAME}-db
  spec:
    replicas: 1
    selector:
      app: ${NAME}-db
      deploymentconfig: ${NAME}-db
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${NAME}-db
          deploymentconfig: ${NAME}-db
      spec:
        containers:
        - name: ${NAME}-db
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          env:
          - name: PG_DATABASE
            value: ${PG_DATABASE}
          - name: PG_ROOT_PASSWORD
            value: ${PG_ROOT_PASSWORD}
          - name: PG_PRIMARY_USER
            value: ${PG_PRIMARY_USER}
          - name: PG_PRIMARY_PASSWORD
            value: ${PG_PRIMARY_PASSWORD}
          volumeMounts:
            - mountPath: /backrestrepo
              name: ${NAME}-db-1
            - mountPath: /backup
              name: ${NAME}-db-2
            - mountPath: /pgconf
              name: ${NAME}-db-3
            - mountPath: /pgdata
              name: ${NAME}-db-4
            - mountPath: /pgwal
              name: ${NAME}-db-5
            - mountPath: /recover
              name: ${NAME}-db-6
            - mountPath: /sshd
              name: ${NAME}-db-7
          image: ""
          imagePullPolicy: Always
          ports:
          - containerPort: 9000
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - emptyDir: {}
            name: ${NAME}-db-1
          - emptyDir: {}
            name: ${NAME}-db-2
          - emptyDir: {}
            name: ${NAME}-db-3
          - emptyDir: {}
            name: ${NAME}-db-4
          - emptyDir: {}
            name: ${NAME}-db-5
          - emptyDir: {}
            name: ${NAME}-db-6
          - emptyDir: {}
            name: ${NAME}-db-7
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}-db
        from:
          kind: ImageStreamTag
          name: ${NAME}-db-postgis:latest
      type: ImageChange

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}-db-postgis
    annotations:
      iconClass: icon-postgresql
  spec:
    lookupPolicy:
      local: false
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: jwiii/example-particle-geoevents:postgis
      importPolicy: {}
      referencePolicy:
        type: Source
